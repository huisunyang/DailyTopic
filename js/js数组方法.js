// 返回新数组 不改变原数组的方法
let arr = [1,2,3]
arr.join() // 将数组转化为字符串
arr.concat(arr2) // 连接多个数组  原数组都不会发生改变
arr.slice(1,2) // 左闭右开  包含开始不包含结束  选择数组的一部分浅拷贝到一个新的数组
arr.map()  // 数组遍历 返回了一个新的数组
arr.every() // 检测数组的所有元素是否都符合条件
// 如果数组中检测到有一个元素不满足，则整个表达式返回 false，且剩余的元素不会再进行检测；
// 如果所有元素都满足条件，则返回 true；
arr.some()
// 如果有一个元素满足条件，则表达式返回 true, 剩余的元素不会再执行检测;
// 如果没有满足条件的元素，则返回 false;
arr.filter() // 返回符合条件的新数组
arr.forEach() // 数组遍历  返回undefined
arr.reduce() // 求和 



//  返回新数组  也改变了原数组
arr.pop() // 返回被删除的元素
arr.push() // 返回被改变后的数组长度
arr.shift() // 返回被删除的元素
arr.unshift() // 返回被改变后的数组长度
arr.reverse() // 返回该数组的引用
arr.sort() // 返回数组
arr.splice() // 返回被删除的元素

